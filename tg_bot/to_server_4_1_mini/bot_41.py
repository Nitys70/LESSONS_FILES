import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
import os

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
AUTH_PASSWORD = os.getenv("AUTH_PASSWORD")
MAX_HISTORY_LENGTH = 10
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

from services.auth import check_auth
from services.logger import log_user, show_stats
from handlers.weather_handler import weather_conversation_handler

from openai import OpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
hello_message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —á–∞—Ç-–±–æ—Ç GPT-4.1-mini." + \
    "C–æ –º–Ω–æ–π —Ç—ã –º–æ–∂–µ—à—å –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ —Ç–µ–º—ã, –∞ —Ç–∞–∫ –∂–µ –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å. " + \
    "–Ø –æ—á–µ–Ω—å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ç–µ–±–µ –ø–æ–º–æ—á—å üôè \n" + \
    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —É–º–µ—é –¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –Ω–æ, —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã ‚õÖÔ∏è \n" +\
    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ <code>–ø–æ–≥–æ–¥–∞</code>, —ç—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∏—â–∞, –∏ –æ–Ω —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_user(update)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_user(update)

    user_message = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not await check_auth(update, context):
        if user_message == AUTH_PASSWORD:
            context.user_data['authorized'] = True
            context.user_data['conversation_history'] = []
            await update.message.reply_text(hello_message, parse_mode="HTML")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    if 'conversation_history' not in context.user_data:
        context.user_data['conversation_history'] = []

    # –î–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data['conversation_history'].append({"role": "user", "content": user_message})

    try:
        messages = [{"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."}]
        messages.extend(context.user_data['conversation_history'])

        response = client.chat.completions.create(
            model="gpt-4.1-mini-2025-04-14",
            messages=messages,
            temperature=0.9,
            max_tokens=1000,
            )

        reply = response.choices[0].message.content.strip()

        # –î–æ–±–∞–≤–∏–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['conversation_history'].append({"role": "assistant", "content": reply})

        # –£—Ä–µ–∂–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(context.user_data['conversation_history']) > MAX_HISTORY_LENGTH * 2:
            context.user_data['conversation_history'] = context.user_data['conversation_history'][-MAX_HISTORY_LENGTH*2:]

        await update.message.reply_text(reply)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ OpenAI")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler –¥–ª—è –ø–æ–≥–æ–¥—ã
    app.add_handler(weather_conversation_handler)

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    # app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("stats", show_stats))

    # –°–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
