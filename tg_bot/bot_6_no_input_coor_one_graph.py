import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import os
import logging
from datetime import datetime
from internal_data import TELEGRAM_BOT_TOKEN
from internal_data import OPENAI_API_KEY
import time
import asyncio




# –¢–æ–∫–µ–Ω—ã
# TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot_logs.log'
)
logger = logging.getLogger(__name__)

AUTH_PASSWORD = "1206"   # –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

user_logins = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å
current_date = datetime.now().date()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
user_links = set() # –ú–û–Ø –î–û–†–ê–ë–û–¢–ö–ê —Å—Å—ã–ª–Ω–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_HISTORY_LENGTH = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏

hello_message = "–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π –ø–∞—Ä–æ–ª—å –≤–µ—Ä–µ–Ω, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! " + \
    "–Ø –±–æ—Ç ChatGPT, –∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö, —Ç–æ–ª—å–∫–æ —Å–ø—Ä–æ—Å–∏ :) " + \
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —É–º–µ—é –∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ, –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å <code>–ø–æ–≥–æ–¥–∞</code>, " + \
            "—ç—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –º–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∏—â–∞, –∏ –æ–Ω —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑."
    

async def check_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    user_id = update.effective_user.id
    if 'authorized' not in context.user_data:
        context.user_data['authorized'] = False
    return context.user_data['authorized']


async def log_user(update: Update):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    global current_date, user_logins, user_links
    
    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å, –æ—á–∏—â–∞–µ–º –ª–æ–≥–∏
    today = datetime.now().date()
    if today != current_date:
        user_logins.clear()
        current_date = today
    
    user_id = update.effective_user.id
    user_link = update.effective_user.link
    if user_id not in user_logins:
        user_logins.add(user_id)
        user_links.add(user_link)
        logger.info(f"New user login: {user_id}, New user link: {user_link}")
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        with open('daily_users.txt', 'a') as f:
            f.write(f"{datetime.now()}: {user_id} - {user_link}\n")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not await check_auth(update, context):
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä–æ–ª—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        return 

    
    context.user_data['conversation_history'] = []
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT –±–æ—Ç. –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è! ü§ñ")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_user(update)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not await check_auth(update, context):
        user_message = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä–æ–ª—å
        if user_message == AUTH_PASSWORD:
            context.user_data['authorized'] = True
            await update.message.reply_text(hello_message, parse_mode="HTML")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            context.user_data['conversation_history'] = []
            return
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return    
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π   
    user_message = update.message.text
    if user_message.lower().strip() == '–ø–æ–≥–æ–¥–∞':
        await update.message.reply_text('–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ—Ä–æ–¥')
        user_message = update.message.text
        await asyncio.sleep(10)
        print(user_message)
        await update.message.reply_photo(weather())
        # weather()
    else:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if 'conversation_history' not in context.user_data:
            context.user_data['conversation_history'] = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data['conversation_history'].append({"role": "user", "content": user_message})

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º messages –¥–ª—è OpenAI:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å system-—Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–¥–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–∞)
            messages = [{"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            messages.extend(context.user_data['conversation_history'])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                temperature=0.7,
                max_tokens=1000
            )

            reply = response.choices[0].message.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            context.user_data['conversation_history'].append({"role": "assistant", "content": reply})

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            if len(context.user_data['conversation_history']) > MAX_HISTORY_LENGTH * 2:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY_LENGTH –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
                context.user_data['conversation_history'] = context.user_data['conversation_history'][-MAX_HISTORY_LENGTH*2:]

            await update.message.reply_text(reply)

        except Exception as e:
            print(f"OpenAI error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.effective_user.id != 218553624:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≤ Telegram
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    unique_users = len(user_logins)
    await update.message.reply_text(f"–°–µ–≥–æ–¥–Ω—è –±–æ—Ç–∞ –ø–æ—Å–µ—Ç–∏–ª–æ {unique_users} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–æ—Ç —Å–ø–∏—Å–æ–∫ {user_links}")

# def weather():
#     print('–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
#     return '–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
#     # return ('snow_forecast.jpg')

def weather():
    print('–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    # return '–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    # return ('snow_forecast.jpg')
    import requests 
    import pandas as pd 
    import json
    from datetime import datetime
    from internal_data import weather_api
    import seaborn as sns
    import matplotlib.pyplot as plt
    from io import BytesIO
    from telegram import Update
    
    # Tomsk city center:
    lat = '56.48'
    lon = '84.98'

    # Sabetta plant area
    # lat = '71.26'
    # lon = '72.05'

    # Krasnodar
    # lat = '45.02'
    # lon = '38.59'

    url = f'https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&units={'metric'}&appid={weather_api}&lang={'ru'}'

    response = requests.get(url)

    data = response.json()

    # !!!!!!!!! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ—è–≤–ª–∏–∞—Å—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –º–µ–Ω—è—é—Ç—Å—è –¥–æ–∂–¥—å —Å–Ω–µ–≥

    forecast_df = pd.DataFrame(data['hourly'])

    feats_to_convert = ['dt']


    def ts_convert(ts):
        return datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')

    for feat in feats_to_convert:
        forecast_df[feat] = forecast_df[feat].apply(ts_convert)
        

    def description_extract(data):

        result = f'{data[0]['main']} : {data[0]['description']}'

        return result
        
    forecast_df['info'] = forecast_df['weather'].apply(description_extract)

    forecast_df = forecast_df.drop('weather', axis=1)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Å–∞–¥–∫–æ–≤ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–ª–æ–≤–∞—Ä—å –ª–∏–±–æ None)
    # forecast_df['rain'] = forecast_df['rain'].apply(lambda x: 
    #     list(x.values())[0] if type(x) is dict else 0
    #     )

    # forecast_df['snow'] = forecast_df['snow'].apply(lambda x: 
    #     list(x.values())[0] if type(x) is dict else 0
    #     )



    plt.figure(figsize=(14,6))

    line_graph = sns.lineplot(
        data = forecast_df, 
        x = 'dt',
        y = 'temp'
        )

    line_graph.grid()

    line_graph.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞', fontsize = 16)
    line_graph.set_xlabel('')
    plt.tick_params(axis='x', labelrotation = 90)

    line_title_name = f'–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ \
        {forecast_df.iloc[0]['dt']} - {forecast_df.iloc[47]['dt']}'

    line_graph.set_title(line_title_name, fontsize = 16)
    
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close()
    print("–ó–ê–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ–≥–æ–¥—É")
    
    
    ######################
    
    plt.subplots(figsize = (14,6))

    hist_gust = sns.barplot(
        data = forecast_df,
        x = 'dt', 
        y='wind_gust',
        color='orange'
    )

    hist_wind = sns.barplot(
        data = forecast_df,
        x = 'dt', 
        y='wind_speed',
        color='blue'
    )

    plt.grid()

    plt.tick_params(axis='x', labelrotation = 90)

    plt.legend([hist_gust, hist_wind], ['–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞', '–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞'])
    
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close()
    print("–ó–ê–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–æ–≥–æ–¥—É_2")
    
    #######################
    
    return buf


def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()