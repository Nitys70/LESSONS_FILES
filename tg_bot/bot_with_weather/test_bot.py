TELEGRAM_TOKEN = ""
OPENAI_API_KEY = ""
WEATHER_API_KEY = ""
AUTH_PASSWORD = ""

import openai
import os
import requests
from datetime import datetime
import logging
import json
import pickle
import traceback

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'  # –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
WEATHER_CITY, LOCATION_NAME, DELETE_LOCATION = range(3)

# –¢–æ–∫–µ–Ω—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
# TELEGRAM_TOKEN = "YOUR_TELEGRAM_TOKEN"
# OPENAI_API_KEY = "YOUR_OPENAI_KEY"
# WEATHER_API_KEY = "YOUR_WEATHER_API_KEY"
# AUTH_PASSWORD = "1206"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
user_logins = set()
current_date = datetime.now().date()
user_links = set()

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
    logger.error("Exception while handling an update:", exc_info=context.error)
    
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)
    
    error_message = (
        f"An exception was raised while handling an update\n"
        f"update = {update}\n"
        f"context.chat_data = {context.chat_data}\n"
        f"context.user_data = {context.user_data}\n"
        f"traceback:\n{tb_string}"
    )
    
    logger.error(error_message)
    
    if isinstance(update, Update):
        try:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            try:
                await update.callback_query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

async def log_user(update: Update):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global current_date, user_logins
    
    today = datetime.now().date()
    if today != current_date:
        user_logins.clear()
        current_date = today
    
    user_id = update.effective_user.id
    user_link = f"@{update.effective_user.username}" if update.effective_user.username else str(user_id)
    
    if user_id not in user_logins:
        user_logins.add(user_id)
        user_links.add(user_link)
        logger.info(f"New user: {user_id} ({user_link})")
        
        with open('daily_users.txt', 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now()}: {user_id} | {user_link}\n")

async def check_auth(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        return context.user_data.get('authorized', False)
    except Exception as e:
        logger.error(f"Error in check_auth: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await log_user(update)
        
        if not await check_auth(update, context):
            await update.message.reply_text(
                "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä–æ–ª—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        await show_main_menu(update)
    except Exception as e:
        logger.error(f"Error in start: {e}")
        await error_handler(update, context)

async def show_main_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        keyboard = [
            ["üí¨ –ß–∞—Ç —Å GPT", "üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã"],
            ["‚≠ê –ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏", "‚öôÔ∏è –ü–æ–º–æ—â—å"]
        ]
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")
        raise

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø—Ä–∏–º–µ—Ä–µ, 
# –Ω–æ –∫–∞–∂–¥–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ try-except –±–ª–æ–∫)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await log_user(update)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not await check_auth(update, context):
            if update.message.text == AUTH_PASSWORD:
                context.user_data['authorized'] = True
                await show_main_menu(update)
                return
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return

        text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text == "üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã":
            await weather_menu(update, context)
        elif text == "üí¨ –ß–∞—Ç —Å GPT":
            await handle_gpt_request(update, context)
        elif text == "‚≠ê –ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏":
            await show_saved_locations(update, context)
        elif text == "‚öôÔ∏è –ü–æ–º–æ—â—å":
            await help_command(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥":
            await show_main_menu(update)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            locations = load_locations(update.effective_user.id)
            if text in locations:
                lat, lon = locations[text]
                plot = await generate_weather_plot(lat, lon, WEATHER_API_KEY)
                await update.message.reply_photo(
                    photo=plot,
                    caption=f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è '{text}'"
                )
            else:
                await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
    except Exception as e:
        logger.error(f"Error in handle_text: {e}")
        await error_handler(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(error_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞—Ü–∏—è–º–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex("^üèôÔ∏è –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞$"), handle_weather_by_city),
                MessageHandler(filters.LOCATION, handle_location),
                MessageHandler(filters.Regex("^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ$"), delete_location_menu)
            ],
            states={
                WEATHER_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_weather_by_city)],
                LOCATION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_user_location)],
                DELETE_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_location_deletion)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("stats", stats))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(conv_handler)
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
    except Exception as e:
        logger.critical(f"Failed to start bot: {e}")

if __name__ == '__main__':
    main()