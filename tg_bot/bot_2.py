import logging
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# üîê –¢–≤–æ–∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = ""
OPENAI_API_KEY = ""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# ‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –∏–ª–∏ "gpt-4", –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            messages=[{"role": "user", "content": user_message}],
            max_tokens=1000,
            temperature=0.7,
        )
        reply = response.choices[0].message.content.strip()

        await update.message.reply_text(reply)

    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT.")

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ ChatGPT ü§ñ")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
