import logging
from datetime import datetime, timedelta
from typing import Optional, List
import sqlite3
import os
import ast
import time
from pathlib import Path
import asyncio

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    CallbackContext
)


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("taxibot_logs.log", encoding='utf-8'),  # <-- –õ–æ–≥-—Ñ–∞–π–ª –±—É–¥–µ—Ç —Ç—É—Ç –∂–µ, –≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ—Ç
        logging.StreamHandler()  # —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# === –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –í –ß–ï–†–ù–û–ú –õ–ò–°–¢–ï ===

def get_black_list_check(user_id) -> bool:
    
    try:
        gen_path = Path(__file__).parent
        # print('GEN PATH: ', gen_path)
        black_list_path = gen_path / 'data'
        black_list_path = black_list_path / 'black_list.txt'

        # print('BL PATH: ', black_list_path)
        with open(black_list_path, 'r', encoding='utf-8') as file:
            data = file.read()
            black_list = ast.literal_eval(data)
        # print('BL LIST CONTAIN: ', black_list)
        # print('BL LIST TYPE: ', type(black_list))
        
        if user_id in black_list:
            return True
        else:
            return False
    except:
        return False
    
    
# === –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ===
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# === –°–¢–ê–¢–£–°–´ FSM ===
(
    WAIT_CONTACT_CHOICE, WAIT_PHONE,  # <--- –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    START,
    ENTER_DATE,
    ENTER_TIME,
    ENTER_PASS_QNT,
    ENTER_DEPARTURE,
    ENTER_DESTINATION,
    ENTER_TIME_WINDOW,
    ENTER_COMMENT,
    CONFIRM_REQUEST,
    DELETE_REQUEST,
    DELETE_REASON,
    ANNOUNCEMENT_START,
    ANNOUNCEMENT_SEND
) = range(15)

# === –¢–û–ß–ö–ò –ú–ê–†–®–†–£–¢–ê (—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π) ===
VALID_POINTS = {
    '–∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ', '–∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ', '–∞/–ø –í–Ω—É–∫–æ–≤–æ', '–∞/–ø –†–æ—â–∏–Ω–æ',
    '—Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è', '—Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ',
    '–∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π', '–∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π', '–∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞', '–∂/–¥ –ö—É—Ä—Å–∫–∏–π', '–∂/–¥ –¢—é–º–µ–Ω—å',
    '–æ—Ç–µ–ª—å "–°–∞–ª—é—Ç"', '–æ—Ç–µ–ª—å "–£—é—Ç"', '–æ—Ç–µ–ª—å "–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ"', '–æ—Ç–µ–ª—å "–í–∏–∫—Ç–æ—Ä–∏—è" (–¢—é–º–µ–Ω—å)'
}

# POINTS_KEYBOARD_FROM = [
#     [InlineKeyboardButton("‚úàÔ∏è –ò–ó ‚ÜóÔ∏è –∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ", callback_data="point_–∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ")],
#     [InlineKeyboardButton("‚úàÔ∏è –ò–ó ‚ÜóÔ∏è –∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ", callback_data="point_–∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ")],
#     [InlineKeyboardButton("‚úàÔ∏è –ò–ó ‚ÜóÔ∏è –∞/–ø –í–Ω—É–∫–æ–≤–æ", callback_data="point_–∞/–ø –í–Ω—É–∫–æ–≤–æ")],
#     [InlineKeyboardButton("‚úàÔ∏è –ò–ó ‚ÜóÔ∏è –∞/–ø –†–æ—â–∏–Ω–æ", callback_data="point_–∞/–ø –†–æ—â–∏–Ω–æ")],
#     [InlineKeyboardButton("üöá –ò–ó ‚ÜóÔ∏è —Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è", callback_data="point_—Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è")],
#     [InlineKeyboardButton("üöá –ò–ó ‚ÜóÔ∏è —Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ", callback_data="point_—Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ")],
#     [InlineKeyboardButton("üöÇ –ò–ó ‚ÜóÔ∏è –∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π", callback_data="point_–∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π")],
#     [InlineKeyboardButton("üöÇ –ò–ó ‚ÜóÔ∏è –∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π", callback_data="point_–∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π")],
#     [InlineKeyboardButton("üöÇ –ò–ó ‚ÜóÔ∏è –∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞", callback_data="point_–∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞")],
#     [InlineKeyboardButton("üöÇ –ò–ó ‚ÜóÔ∏è –∂/–¥ –ö—É—Ä—Å–∫–∏–π", callback_data="point_–∂/–¥ –ö—É—Ä—Å–∫–∏–π")],
#     [InlineKeyboardButton("üöÇ –ò–ó ‚ÜóÔ∏è –∂/–¥ –¢—é–º–µ–Ω—å", callback_data="point_–∂/–¥ –¢—é–º–µ–Ω—å")],
#     [InlineKeyboardButton("üè® –ò–ó ‚ÜóÔ∏è –æ—Ç–µ–ª—å '–°–∞–ª—é—Ç'", callback_data="point_–æ—Ç–µ–ª—å \"–°–∞–ª—é—Ç\"")],
#     [InlineKeyboardButton("üè® –ò–ó ‚ÜóÔ∏è –æ—Ç–µ–ª—å '–£—é—Ç'", callback_data="point_–æ—Ç–µ–ª—å \"–£—é—Ç\"")],
#     [InlineKeyboardButton("üè® –ò–ó ‚ÜóÔ∏è –æ—Ç–µ–ª—å '–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ'", callback_data="point_–æ—Ç–µ–ª—å \"–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ\"")],
#     [InlineKeyboardButton("üè® –ò–ó ‚ÜóÔ∏è –æ—Ç–µ–ª—å '–í–∏–∫—Ç–æ—Ä–∏—è (–¢—é–º–µ–Ω—å)'", callback_data="point_–æ—Ç–µ–ª—å \"–í–∏–∫—Ç–æ—Ä–∏—è (–¢—é–º–µ–Ω—å)\"")]
#     ]

# POINTS_KEYBOARD_TO = [
#     [InlineKeyboardButton("‚úàÔ∏è –í ‚ÜòÔ∏è –∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ", callback_data="point_–∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ")],
#     [InlineKeyboardButton("‚úàÔ∏è –í ‚ÜòÔ∏è –∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ", callback_data="point_–∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ")],
#     [InlineKeyboardButton("‚úàÔ∏è –í ‚ÜòÔ∏è –∞/–ø –í–Ω—É–∫–æ–≤–æ", callback_data="point_–∞/–ø –í–Ω—É–∫–æ–≤–æ")],
#     [InlineKeyboardButton("‚úàÔ∏è –í ‚ÜòÔ∏è –∞/–ø –†–æ—â–∏–Ω–æ", callback_data="point_–∞/–ø –†–æ—â–∏–Ω–æ")],
#     [InlineKeyboardButton("üöá –í ‚ÜòÔ∏è —Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è", callback_data="point_—Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è")],
#     [InlineKeyboardButton("üöá –í ‚ÜòÔ∏è —Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ", callback_data="point_—Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ")],
#     [InlineKeyboardButton("üöÇ –í ‚ÜòÔ∏è –∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π", callback_data="point_–∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π")],
#     [InlineKeyboardButton("üöÇ –í ‚ÜòÔ∏è –∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π", callback_data="point_–∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π")],
#     [InlineKeyboardButton("üöÇ –í ‚ÜòÔ∏è –∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞", callback_data="point_–∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞")],
#     [InlineKeyboardButton("üöÇ –í ‚ÜòÔ∏è –∂/–¥ –ö—É—Ä—Å–∫–∏–π", callback_data="point_–∂/–¥ –ö—É—Ä—Å–∫–∏–π")],
#     [InlineKeyboardButton("üöÇ –í ‚ÜòÔ∏è –∂/–¥ –¢—é–º–µ–Ω—å", callback_data="point_–∂/–¥ –¢—é–º–µ–Ω—å")],
#     [InlineKeyboardButton("üè® –í ‚ÜòÔ∏è –æ—Ç–µ–ª—å '–°–∞–ª—é—Ç'", callback_data="point_–æ—Ç–µ–ª—å \"–°–∞–ª—é—Ç\"")],
#     [InlineKeyboardButton("üè® –í ‚ÜòÔ∏è –æ—Ç–µ–ª—å '–£—é—Ç'", callback_data="point_–æ—Ç–µ–ª—å \"–£—é—Ç\"")],
#     [InlineKeyboardButton("üè® –í ‚ÜòÔ∏è –æ—Ç–µ–ª—å '–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ'", callback_data="point_–æ—Ç–µ–ª—å \"–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ\"")],
#     [InlineKeyboardButton("üè® –í ‚ÜòÔ∏è –æ—Ç–µ–ª—å '–í–∏–∫—Ç–æ—Ä–∏—è (–¢—é–º–µ–Ω—å)'", callback_data="point_–æ—Ç–µ–ª—å \"–í–∏–∫—Ç–æ—Ä–∏—è (–¢—é–º–µ–Ω—å)\"")]
#     ]

POINTS_KEYBOARD_FROM = [
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: ‚úàÔ∏è –∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ", callback_data="point_–∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: ‚úàÔ∏è –∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ", callback_data="point_–∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: ‚úàÔ∏è –∞/–ø –í–Ω—É–∫–æ–≤–æ", callback_data="point_–∞/–ø –í–Ω—É–∫–æ–≤–æ")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: ‚úàÔ∏è –∞/–ø –†–æ—â–∏–Ω–æ", callback_data="point_–∞/–ø –†–æ—â–∏–Ω–æ")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üöá —Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è", callback_data="point_—Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üöá —Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ", callback_data="point_—Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üöÇ –∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π", callback_data="point_–∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üöÇ –∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π", callback_data="point_–∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üöÇ –∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞", callback_data="point_–∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üöÇ –∂/–¥ –ö—É—Ä—Å–∫–∏–π", callback_data="point_–∂/–¥ –ö—É—Ä—Å–∫–∏–π")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üöÇ –∂/–¥ –¢—é–º–µ–Ω—å", callback_data="point_–∂/–¥ –¢—é–º–µ–Ω—å")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üè® –æ—Ç–µ–ª—å '–°–∞–ª—é—Ç'", callback_data="point_–æ—Ç–µ–ª—å \"–°–∞–ª—é—Ç\"")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üè® –æ—Ç–µ–ª—å '–£—é—Ç'", callback_data="point_–æ—Ç–µ–ª—å \"–£—é—Ç\"")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üè® –æ—Ç–µ–ª—å '–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ'", callback_data="point_–æ—Ç–µ–ª—å \"–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ\"")],
    [InlineKeyboardButton("üöÄ –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï: üè® –æ—Ç–µ–ª—å '–í–∏–∫—Ç–æ—Ä–∏—è (–¢—é–º–µ–Ω—å)'", callback_data="point_–æ—Ç–µ–ª—å \"–í–∏–∫—Ç–æ—Ä–∏—è (–¢—é–º–µ–Ω—å)\"")]
    ]

POINTS_KEYBOARD_TO = [
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: ‚úàÔ∏è –∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ", callback_data="point_–∞/–ø –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: ‚úàÔ∏è –∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ", callback_data="point_–∞/–ø –î–æ–º–æ–¥–µ–¥–æ–≤–æ")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: ‚úàÔ∏è –∞/–ø –í–Ω—É–∫–æ–≤–æ", callback_data="point_–∞/–ø –í–Ω—É–∫–æ–≤–æ")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: ‚úàÔ∏è –∞/–ø –†–æ—â–∏–Ω–æ", callback_data="point_–∞/–ø –†–æ—â–∏–Ω–æ")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üöá —Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è", callback_data="point_—Å—Ç.–º. –î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∞—è")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üöá —Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ", callback_data="point_—Å—Ç.–º. –•–æ–≤—Ä–∏–Ω–æ")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üöÇ –∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π", callback_data="point_–∂/–¥ –ü–∞–≤–µ–ª–µ—Ü–∫–∏–π")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üöÇ –∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π", callback_data="point_–∂/–¥ –í–æ—Å—Ç–æ—á–Ω—ã–π")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üöÇ –∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞", callback_data="point_–∂/–¥ –¢—Ä–∏ –≤–æ–∫–∑–∞–ª–∞")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üöÇ –∂/–¥ –ö—É—Ä—Å–∫–∏–π", callback_data="point_–∂/–¥ –ö—É—Ä—Å–∫–∏–π")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üöÇ –∂/–¥ –¢—é–º–µ–Ω—å", callback_data="point_–∂/–¥ –¢—é–º–µ–Ω—å")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üè® –æ—Ç–µ–ª—å '–°–∞–ª—é—Ç'", callback_data="point_–æ—Ç–µ–ª—å \"–°–∞–ª—é—Ç\"")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üè® –æ—Ç–µ–ª—å '–£—é—Ç'", callback_data="point_–æ—Ç–µ–ª—å \"–£—é—Ç\"")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üè® –æ—Ç–µ–ª—å '–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ'", callback_data="point_–æ—Ç–µ–ª—å \"–ò–±–∏—Å-–î–æ–º–æ–¥–µ–¥–æ–≤–æ\"")],
    [InlineKeyboardButton("üéØ –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: üè® –æ—Ç–µ–ª—å '–í–∏–∫—Ç–æ—Ä–∏—è (–¢—é–º–µ–Ω—å)'", callback_data="point_–æ—Ç–µ–ª—å \"–í–∏–∫—Ç–æ—Ä–∏—è (–¢—é–º–µ–Ω—å)\"")]
    ]


# === –•–ï–õ–ü–ï–†–´ –î–õ–Ø –ë–î –ò –î–ò–†–ï–ö–¢–û–†–ò–ò ===
def ensure_data_dir():
    base_dir = Path(__file__).parent
    data_dir = base_dir / 'data'
    data_dir.mkdir(exist_ok=True)
    return str(data_dir / 'travel_bot.db')

def init_db():
    db_path = ensure_data_dir()
    conn = sqlite3.connect(db_path, timeout=20)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS travel_requests (
            request_id TEXT PRIMARY KEY,
            user_id INTEGER,
            contact_id TEXT,     -- username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
            contact_type TEXT,   -- 'username' –∏–ª–∏ 'phone'
            date TEXT,
            time TEXT,
            pass_qnt INTEGER,
            user_comment TEXT,
            departure_point TEXT,
            destination_point TEXT,
            time_window INTEGER,
            active INTEGER DEFAULT 1,
            delete_reason TEXT DEFAULT NULL,
            created_at TEXT,
            updated_at TEXT
        )
    ''')
    conn.commit()
    conn.close()

# === –ú–û–î–ï–õ–¨ –ó–ê–Ø–í–ö–ò ===
class TravelRequest:
    def __init__(self, user_id, contact_id, contact_type):
        self.user_id = user_id
        self.contact_id = contact_id
        self.contact_type = contact_type
        self.date = None
        self.time = None
        self.pass_qnt = None
        self.user_comment = None
        self.departure_point = None
        self.destination_point = None
        self.time_window = None
        self.active = True
        self.request_id = datetime.now().strftime("%Y%m%d%H%M%S%f")
        self.created_at = datetime.now().isoformat()
        self.updated_at = None
        self.delete_reason = None

    def __str__(self):
        who = f"@{self.contact_id}" if self.contact_type == "username" else f"üìû {self.contact_id}"
        return (
            f"–ó–∞–ø—Ä–æ—Å –æ—Ç {who} (ID: {self.request_id[-8:]})\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {self.pass_qnt}\n"
            f"–î–∞—Ç–∞: {self.date.strftime('%d.%m.%Y')}\n"
            f"–í—Ä–µ–º—è: {self.time}\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {self.departure_point} ‚Üí {self.destination_point}\n"
            f"–û–∫–Ω–æ –ø–æ–∏—Å–∫–∞: +{self.time_window} –º–∏–Ω\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user_comment}"
        )

    def save(self):
        db_path = ensure_data_dir()
        conn = sqlite3.connect(db_path, timeout=20)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO travel_requests
            (request_id, user_id, contact_id, contact_type, date, time, pass_qnt,
            user_comment, departure_point, destination_point, time_window,
             active, delete_reason, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            self.request_id,
            self.user_id,
            self.contact_id,
            self.contact_type,
            str(self.date),
            str(self.time),
            self.pass_qnt,
            self.user_comment,
            self.departure_point,
            self.destination_point,
            self.time_window,
            1 if self.active else 0,
            self.delete_reason,
            self.created_at,
            datetime.now().isoformat()
        ))
        conn.commit()
        conn.close()

    @classmethod
    def get_active_requests(cls, user_id: Optional[int] = None):
        db_path = ensure_data_dir()
        conn = sqlite3.connect(db_path, timeout=20)
        cursor = conn.cursor()
        if user_id:
            cursor.execute('''
                SELECT * FROM travel_requests
                WHERE user_id = ? AND active = 1
                ORDER BY created_at DESC
            ''', (user_id,))
        else:
            cursor.execute('''
                SELECT * FROM travel_requests
                WHERE active = 1
                ORDER BY created_at DESC
            ''')
        results = []
        for row in cursor.fetchall():
            req = cls(row[1], row[2], row[3])
            req.request_id = row[0]
            req.date = datetime.strptime(row[4], '%Y-%m-%d').date()
            req.time = datetime.strptime(row[5], '%H:%M:%S').time()
            req.pass_qnt = row[6]
            req.user_comment = row[7]
            req.departure_point = row[8]
            req.destination_point = row[9]
            req.time_window = row[10]
            req.active = bool(row[11])
            req.delete_reason = row[12]
            req.created_at = row[13]
            req.updated_at = row[14]
            results.append(req)
        conn.close()
        return results

    @classmethod
    def get_by_short_id(cls, short_id: str, user_id: int):
        db_path = ensure_data_dir()
        conn = sqlite3.connect(db_path, timeout=20)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM travel_requests
            WHERE request_id LIKE ? AND user_id = ? AND active = 1
        ''', (f'%{short_id}', user_id))
        row = cursor.fetchone()
        if not row:
            conn.close()
            return None
        req = cls(row[1], row[2], row[3])
        req.request_id = row[0]
        req.date = datetime.strptime(row[4], '%Y-%m-%d').date()
        req.time = datetime.strptime(row[5], '%H:%M:%S').time()
        req.pass_qnt = row[6]
        req.user_comment = row[7]
        req.departure_point = row[8]
        req.destination_point = row[9]
        req.time_window = row[10]
        req.active = bool(row[11])
        req.delete_reason = row[12]
        req.created_at = row[13]
        req.updated_at = row[14]
        conn.close()
        return req

    @classmethod
    def get_by_id(cls, request_id: str):
        db_path = ensure_data_dir()
        conn = sqlite3.connect(db_path, timeout=20)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM travel_requests WHERE request_id = ?', (request_id,))
        row = cursor.fetchone()
        if not row:
            conn.close()
            return None
        req = cls(row[1], row[2], row[3])
        req.request_id = row[0]
        req.date = datetime.strptime(row[4], '%Y-%m-%d').date()
        req.time = datetime.strptime(row[5], '%H:%M:%S').time()
        req.pass_qnt = row[6]
        req.user_comment = row[7]
        req.departure_point = row[8]
        req.destination_point = row[9]
        req.time_window = row[10]
        req.active = bool(row[11])
        req.delete_reason = row[12]
        req.created_at = row[13]
        req.updated_at = row[14]
        conn.close()
        return req

    def deactivate(self, reason: str = None):
        self.active = False
        self.delete_reason = reason
        self.updated_at = datetime.now().isoformat()
        self.save()
        return True

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î ===
def check_db_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î"""
    try:
        db_path = ensure_data_dir()
        conn = sqlite3.connect(db_path, timeout=20)
        cursor = conn.cursor()
        
        cursor.execute("PRAGMA table_info(travel_requests)")
        columns = {col[1]: col[2] for col in cursor.fetchall()}
        
        required_columns = {
            'request_id': 'TEXT',
            'user_id': 'INTEGER',
            'contact_id': 'TEXT',
            'contact_type': 'TEXT',
            'date': 'TEXT',
            'time': 'TEXT',
            'pass_qnt': 'INTEGER',
            'user_comment': 'TEXT',
            'departure_point': 'TEXT',
            'destination_point': 'TEXT',
            'time_window': 'INTEGER',
            'active': 'INTEGER',
            'delete_reason': 'TEXT',
            'created_at': 'TEXT',
            'updated_at': 'TEXT'
        }
        
        for col, col_type in required_columns.items():
            if col not in columns:
                cursor.execute(f"ALTER TABLE travel_requests ADD COLUMN {col} {col_type}")
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {col} {col_type}")
        
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()
            
            
# === –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ú–ï–ù–Æ –î–õ–Ø –í–°–ï–• ===
MAIN_MENU = [
    ["üöï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"],
    ["üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É"],
    ["–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –ø—Ä–∞–≤–æ–≤–∞—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]  
]
def main_keyboard():
    return ReplyKeyboardMarkup(MAIN_MENU, resize_keyboard=True)


# === –û–ë–†–ê–ë–û–¢–ö–ê –°–í–Ø–ó–ê–ù–ù–ê–Ø –° –°–û–ì–õ–ê–®–ï–ù–ò–ï–ú ===

# –§-—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –∫ –ë–î —Å–æ–≥–ª–∞—à–µ–Ω–∏–π
def get_consents_db_path():
    base_dir = Path(__file__).parent
    data_dir = base_dir / 'data'
    data_dir.mkdir(exist_ok=True)
    
    # print('get_consents_db_path')
    
    return str(data_dir / 'consents.db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å–æ–≥–ª–∞—Å–∏–π
def init_consents_db():
    db_path = get_consents_db_path()
    conn = sqlite3.connect(db_path, timeout=20)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS consents (
            user_id INTEGER PRIMARY KEY,
            consented_at TEXT,
            user_name TEXT DEFAULT NULL,
            user_phone INTEGER DEFAULT NULL
        )
    ''')
    conn.commit()
    conn.close()
    
    # print('init_consents_db')

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
def has_consented(user_id: int) -> bool:
    db_path = get_consents_db_path()
    conn = sqlite3.connect(db_path, timeout=20)
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM consents WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    # print('has_consented')
    
    
    return result is not None

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è
def save_consent(user_id: int):
    db_path = get_consents_db_path()
    conn = sqlite3.connect(db_path, timeout=20)
    cursor = conn.cursor()
    cursor.execute(
        'INSERT OR IGNORE INTO consents (user_id, consented_at) VALUES (?, ?)',
        (user_id, datetime.now().isoformat())
    )
    conn.commit()
    conn.close()
    

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_user_ids():
    db_path = get_consents_db_path()
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT user_id FROM consents")
    ids_list = [row[0] for row in cursor.fetchall()]
    conn.close()
    return ids_list

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —é–∑–µ—Ä–Ω–µ–π–º–∞ –≤ –ë–î —Å–æ–≥–ª–∞—Å–∏–π
async def save_user_name_to_consents(user_name: str, user_id: int):
    db_path = get_consents_db_path()
    conn = sqlite3.connect(db_path, timeout=20)
    cursor = conn.cursor()
    cursor.execute(
        'UPDATE consents SET user_name = ? WHERE user_id = ?',
        (user_name, user_id)
    )
    conn.commit()
    conn.close()
    
    # print('save_consent')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î —Å–æ–≥–ª–∞—Å–∏–π
async def save_user_phone_to_consents(user_phone: int, user_id: int):
    db_path = get_consents_db_path()
    conn = sqlite3.connect(db_path, timeout=20)
    cursor = conn.cursor()
    cursor.execute(
        'UPDATE consents SET user_phone = ? WHERE user_id = ?',
        (user_phone, user_id)
    )
    conn.commit()
    conn.close()

# –ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
async def validation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    
    user_id = update.effective_user.id
    
    if has_consented(user_id):
        # print('YEEEAH', user_id)
        await restart(update, context)
    else:
        print('ELSE IN VALIDATION')
        keyboard_agree = InlineKeyboardMarkup([
            [InlineKeyboardButton('–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ü–î –∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–æ—Ç–∞', callback_data='agree_personal_data')],
            [InlineKeyboardButton('–Ø –ù–ï —Å–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)', callback_data='disagree_personal_data')]
        ])
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–∞ –Ω–∞ —Ç–∞–∫—Å–∏.\n\n"
            "–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º.\n\n"
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–±–æ—Ä–µ –∑–∞—è–≤–æ–∫, –≥–¥–µ –í—ã —É–∫–∞–∂–µ—Ç–µ –¥–µ—Ç–∞–ª–∏ –í–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏."
            " –î–∞–ª–µ–µ –í—ã –∏ –í–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏, –≤ —Å–ª—É—á–∞–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤, –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, "
            "–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏ –∏ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º"
            " –∏–ª–∏ –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).\n\n"
            "–î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è 152-–§–ó '–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'"
            " –≤ –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–¥–∞–∫—Ü–∏–∏.\n\n"
            " –ü–æ —Å–ª–µ–¥—É—é—â–∏–º —Å—Å—ã–ª–∫–∞–º –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            " –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º."
            "\n–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>'–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞) –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ü–î –∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–æ—Ç–∞'</b>"
            " –í—ã <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ</b>, —á—Ç–æ:\n\n"
            "- <b>–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ</b> –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ü–æ–ª–∏—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,"
            " <b>–¥–∞—ë—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b> https://disk.yandex.ru/i/IRt-xqKvtK6FjA\n\n"
            "- <b>–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å</b> —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, <b>—Å–æ–≥–ª–∞—Å–Ω—ã</b> —Å –Ω–∏–º–∏,"
            " –∏ <b>–æ–±—è–∑—É–µ—Ç–µ—Å—å —Å–æ–±–ª—é–¥–∞—Ç—å</b> https://disk.yandex.ru/i/bvLYd2lmRYfezg"
            "\n\n –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ <b>'–Ø –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω(-–Ω–∞)'</b>",
            parse_mode='HTML',
            reply_markup=keyboard_agree
            )
 
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ü–û–°–õ–ï —Å–æ–≥–ª–∞—Å–∏—è, –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ 
async def agree_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    save_consent(user_id)
    await query.answer()
    await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Ç–µ–ª–µ–≥–∞—Ä–º-–±–æ—Ç–∞ –∏ –¥–∞–ª–∏ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, restart)
    await restart(update, context)        


async def disagree_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.edit_message_text("‚õî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É ‚õî\n\n"
                                  "–í—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –¥–∞–ª–∏"
                                  " —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç 152-–§–ó\n\n"
                                  "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ: –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è /start")
    await ConversationHandler.END       
    


# === –•–ï–õ–ü–ï–†–´ –î–õ–Ø –ú–ê–¢–ß–ï–ô ===
def find_matches(request: TravelRequest) -> List[TravelRequest]:
    """–ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        all_requests = TravelRequest.get_active_requests()
        matches = []
        
        request_datetime = datetime.combine(request.date, request.time)
        time_window = timedelta(minutes=request.time_window)
        
        for other_request in all_requests:
            if other_request.user_id == request.user_id:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–ø—Ä—è–º–æ–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ–µ)
            route_match = (
                (other_request.departure_point == request.departure_point and
                 other_request.destination_point == request.destination_point) or
                (other_request.departure_point == request.destination_point and
                 other_request.destination_point == request.departure_point)
            )
            
            if not route_match:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            other_datetime = datetime.combine(other_request.date, other_request.time)
            time_diff = abs((request_datetime - other_datetime).total_seconds()) / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            if time_diff <= max(request.time_window, other_request.time_window):
                matches.append(other_request)
        
        return matches
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {str(e)}")
        return []

async def notify_user_about_match(user_id: int, original_request: TravelRequest, match_request: TravelRequest, bot):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏"""
    text = (
        "üéâ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–ø—É—Ç—á–∏–∫!\n\n"
        f"–î–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n{original_request}\n\n"
        f"–ù–∞–π–¥–µ–Ω –ø–æ–ø—É—Ç—á–∏–∫:\n"
        f"@{match_request.username}\n"
        f"–î–∞—Ç–∞: {match_request.date}\n"
        f"–í—Ä–µ–º—è: {match_request.time}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {match_request.direction}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {match_request.user_comment}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_request —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ø—É—Ç—á–∏–∫–∞."
    )
    
    try:
        await bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # await context.bot.send_message(chat_id=user_id, text=text, parse_mode=ParseMode.HTML)
    # print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{text}")  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

async def notify_about_new_request(new_request: TravelRequest, bot):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        matches = find_matches(new_request)
        if not matches:
            return
            
        for match in matches:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ø—Ä—è–º–æ–µ/–æ–±—Ä–∞—Ç–Ω–æ–µ)
                if (match.departure_point == new_request.departure_point and
                    match.destination_point == new_request.destination_point):
                    match_type = "–ø—Ä—è–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
                else:
                    match_type = "–æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
                
                message = (
                    "üöñ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ø—É—Ç—á–∏–∫!\n\n"
                    f"üìç –í–∞—à –º–∞—Ä—à—Ä—É—Ç: {match.departure_point} ‚Üí {match.destination_point}\n"
                    f"üîÄ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match_type}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{new_request.username}\n"
                    f"üìÖ –î–∞—Ç–∞: {new_request.date.strftime('%d.%m.%Y')}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {new_request.time} (+ {new_request.time_window} –º–∏–Ω)\n"
                    f"üôã‚Äç‚ôÇÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {new_request.pass_qnt}\n"
                    f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {new_request.user_comment}\n\n"
                    "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!"
                )
                
                await bot.send_message(
                    chat_id=match.user_id,
                    text=message,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {match.user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {e}")

async def notify_about_matches(update: Update, context: CallbackContext, request: TravelRequest, matches: List[TravelRequest]):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö"""
    if not matches:
        return
    
    text = "üéâ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–ø—É—Ç—á–∏–∫–∏:\n\n"
    for i, match in enumerate(matches, 1):
        text += (
            f"{i}. @{match.username}\n"
            f"–î–∞—Ç–∞: {match.date}\n"
            f"–í—Ä–µ–º—è: {match.time}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {match.direction}\n"
            f"üôã‚Äç‚ôÇÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {match.pass_qnt}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {match.user_comment}\n\n"            
        )
    
    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_request —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ø—É—Ç—á–∏–∫–∞."
    
    if update.callback_query:
        await update.callback_query.message.reply_text(text)
    else:
        await update.message.reply_text(text)


async def notify_about_match(user_id: int, original_request: TravelRequest, match_request: TravelRequest, bot):
    message = (
        "üöñ –ù–∞–π–¥–µ–Ω –ø–æ–ø—É—Ç—á–∏–∫!\n\n"
        f"üìç –í–∞—à –º–∞—Ä—à—Ä—É—Ç: {original_request.departure_point} ‚Üí {original_request.destination_point}\n"
        f"üë§ –ü–æ–ø—É—Ç—á–∏–∫: @{match_request.username}\n"
        f"üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {match_request.destination_point} ‚Üí {match_request.departure_point}\n"
        f"‚è∞ –í—Ä–µ–º—è: {match_request.time}\n"
        f"üìÖ –î–∞—Ç–∞: {match_request.date}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {match_request.user_comment}\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"
    )
    await bot.send_message(chat_id=user_id, text=message)

# === –•–≠–ù–î–õ–ï–†–´ –°–¢–ê–†–¢–ê –ò –ü–†–û–í–ï–†–ö–ò –ö–û–ù–¢–ê–ö–¢–ê ===

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # print(black_list)
    try:
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ (–æ—à–∏–±–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –≥–ª.–º–µ–Ω—é)
        if context.user_data.get('in_conversation'):

            await restart_and_end(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ,–ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        else:

    
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –ë–î consents (–µ—Å–ª–∏ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç - None)
            user_id = update.effective_user.id
            
            if not has_consented(user_id):
                await update.message.reply_text(
                    "–í—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,"
                    " —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–º,"
                    " –∞ —Ç–∞–∫ –∂–µ –Ω–µ –¥–∞–ª–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                    "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ ‚û°Ô∏è /start")
                return ConversationHandler.END
                
            if get_black_list_check(user_id):
                await update.message.reply_text(
                    "–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—é —á–∞—Ç-–±–æ—Ç–∞.\n\n"
                    "–ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ –∞–¥—Ä–µ—Å—É taxicarpooling@mail.ru")
                return ConversationHandler.END
            
            db_path = get_consents_db_path()
            conn = sqlite3.connect(db_path, timeout=20)
            cursor = conn.cursor()
            cursor.execute(
                'SELECT user_phone FROM consents WHERE user_id = ?', (user_id,)
            )
            result = cursor.fetchone()
            conn.close()
            
            phone_number = result[0]
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            
            # –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è update –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∑–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = update.effective_user
            user_id = user.id
            username = user.username
            if update.message:
                reply = update.message.reply_text
            elif update.callback_query:
                reply = update.callback_query.message.reply_text
            else:
                # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –º–æ–∂–Ω–æ fallback:
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å username ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ, –∏–Ω–∞—á–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            if not username and not phone_number:
                # print('IF 1 RESTART')
                
                text = (
                    "‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ (—ç—Ç–æ –≤–∞—à Telegram-–ª–æ–≥–∏–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, @durov).\n\n"
                    "üìù <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å username?</b>\n"
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram.\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª/¬´Username¬ª.\n"
                    "3. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, super_tg_user).\n\n"
                    "–í —Å–ª—É—á–∞–µ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–π, –≤ –¥–∞–Ω–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n\n"
                    "üîÅ–ü–û–°–õ–ïüîÅ —Å–æ–∑–¥–∞–Ω–∏—è username, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n"
                    "‚ÜîÔ∏è–ò–õ–ò‚ÜîÔ∏è –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üïª, –µ—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å username (–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Å–∞–º–æ–º –Ω–∏–∑—É):"
                )
                button = ReplyKeyboardMarkup(
                    [[KeyboardButton("‚úÖüì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üì≤‚úÖ", request_contact=True)]],
                    resize_keyboard=True, one_time_keyboard=True
                )
                await reply(text, parse_mode='HTML', reply_markup=button)
                return WAIT_PHONE
            
            # –ï–°–õ–ò –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if phone_number:
                
                context.user_data['contact_id'] = phone_number
                context.user_data['contact_type'] = 'phone'
                await reply(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, @{username}!\n"
                    "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–µ–∑–¥–æ–∫.\n\n"
                    "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/new_request - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
                    "/my_requests - –º–æ–∏ –∑–∞—è–≤–∫–∏\n"
                    "/delete_request - —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
                    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∏–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ.\n\n"
                    "–ú–µ–Ω—é –±–æ—Ç–∞ - –∫–Ω–æ–ø–∫–∞ —Ä—è–¥–æ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º (–≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫, –∏–ª–∏ –∫–∞–∫ —Å–ª—ç—à /)\n\n"
                    "–î–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å / —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ / –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö @yuriy_ds7, taxicarpooling@mail.ru \n\n "
                    "–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: https://disk.yandex.ru/i/IRt-xqKvtK6FjA.\n"
                    "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ https://disk.yandex.ru/i/bvLYd2lmRYfezg",
                    parse_mode='HTML',
                    disable_web_page_preview=True,
                    reply_markup=main_keyboard()
                )
                
                return START
            
            # –ï–°–õ–ò –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è —é–∑–µ—Ä–Ω–µ–π–º
            else:
                
                context.user_data['contact_id'] = username
                context.user_data['contact_type'] = 'username'
                await reply(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, @{username}!\n"
                    "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–µ–∑–¥–æ–∫.\n\n"
                    "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/new_request - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
                    "/my_requests - –º–æ–∏ –∑–∞—è–≤–∫–∏\n"
                    "/delete_request - —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
                    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∏–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ.\n\n"
                    "–ú–µ–Ω—é –±–æ—Ç–∞ - –∫–Ω–æ–ø–∫–∞ —Ä—è–¥–æ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º (–≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫, –∏–ª–∏ –∫–∞–∫ —Å–ª—ç—à /)\n\n"
                    "–î–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å / —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ / –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö @yuriy_ds7, taxicarpooling@mail.ru \n\n "
                    "–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: https://disk.yandex.ru/i/IRt-xqKvtK6FjA.\n"
                    "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ https://disk.yandex.ru/i/bvLYd2lmRYfezg",
                    parse_mode='HTML',
                    disable_web_page_preview=True,
                    reply_markup=main_keyboard()
                )
                await save_user_name_to_consents(username, user_id)
            
                return START
    except:
        pass

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä–µ—à–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
async def restart_and_end(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    
    cancel_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
            ])
    await update.message.reply_text("‚ùó–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏‚ùó\n\n" 
                                    "–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
                                    "‚¨áÔ∏è‚¨áÔ∏è ‚¨áÔ∏è‚¨áÔ∏è ‚¨áÔ∏è‚¨áÔ∏è",
                                    reply_markup=cancel_keyboard)
    await cancel(update, context)

# –§—É–Ω–∫—Ü—è–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data"""
    if update.message.contact and update.message.contact.phone_number:
        phone = update.message.contact.phone_number
        context.user_data['contact_id'] = phone
        context.user_data['contact_type'] = 'phone'
        user_id = update.effective_user.id
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/new_request - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É\n"
            "/my_requests - –º–æ–∏ –∑–∞—è–≤–∫–∏\n"
            "/delete_request - —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É\n"
            "–ò–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É.",
            reply_markup=main_keyboard()
        )
        
        await save_user_phone_to_consents(phone, user_id)
        return START
    else:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª –Ω–∏–∂–µ.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                resize_keyboard=True, one_time_keyboard=True
            )
        )
        return WAIT_PHONE

# === –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –ó–ê–Ø–í–ö–ò ===

async def new_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ (–æ—à–∏–±–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –≥–ª.–º–µ–Ω—é)
        
        if context.user_data.get('in_conversation'):
        # if context.user_data:
        
            print('IN CONTEXT new_request', context.user_data)
            # ConversationHandler.END
            # await cancel(update, context)
            print(update)
            print(context)
            await restart_and_end(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ,–ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        else:    
            user_id = update.effective_user.id
            
            if not has_consented(user_id):
                await update.message.reply_text(
                    "–í—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,"
                    " —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–º,"
                    " –∞ —Ç–∞–∫ –∂–µ –Ω–µ –¥–∞–ª–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                    "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ ‚û°Ô∏è /start")
                return ConversationHandler.END
                
                
            if get_black_list_check(user_id):
                await update.message.reply_text(
                    "–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.\n\n"
                    "–ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ –∞–¥—Ä–µ—Å—É taxicarpooling@mail.ru")
                return ConversationHandler.END
                
            if not context.user_data.get('contact_id'):
                # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è restart
                await restart(update, context)
                
                # return WAIT_PHONE
                return ConversationHandler.END
            
            if context.user_data.get('in_conversation', False):
                await update.message.reply_text(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
                    reply_markup=main_keyboard()
                )
                return ConversationHandler.END

    except:
        pass    
   
    context.user_data['in_conversation'] = True
    context.user_data['request'] = TravelRequest(
        update.effective_user.id,
        context.user_data['contact_id'],
        context.user_data['contact_type']
    )
    
    cancel_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
        ])
    
    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>02.07.2025</b>):\n\n",
        parse_mode='HTML',
        reply_markup=cancel_keyboard
    )
    return ENTER_DATE

async def enter_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await handle_cancel(update, context): return ConversationHandler.END
    text = update.message.text
    text = text.replace('/', '.')
    text = text.replace(':', '.')
    try:
        date = datetime.strptime(text, "%d.%m.%Y").date()
        
        today_date = datetime.now().date()
        
        if date < today_date:
            cancel_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
            ])
            await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, –≤—ã –∏—â–µ—Ç–µ –ø–æ–ø—É—Ç—á–∏–∫–∞ –≤ –ø—Ä–æ—à–ª–æ–º üï∞Ô∏è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –µ—â–µ —Ä–∞–∑.\n\n"
                                            "–ò–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", 
                                            reply_markup=cancel_keyboard)
            return ENTER_DATE

        context.user_data['request'].date = date
        
        cancel_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
        ])
                
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (<b>–ß–ß:–ú–ú</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä, <b>14:30</b>):\n\n",
            parse_mode='HTML',
            reply_markup=cancel_keyboard
        )
        return ENTER_TIME
    except ValueError:
        cancel_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
        ])
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", 
                                        reply_markup=cancel_keyboard)
        return ENTER_DATE

async def enter_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await handle_cancel(update, context): return ConversationHandler.END
    
    text = update.message.text
    text = text.replace('.', ':')
    text = text.replace('-', ':')
    text = text.replace('/', ':')
    
    try:
        time = datetime.strptime(text, "%H:%M").time()
        context.user_data['request'].time = time
        
        cancel_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
        ])
              
        await update.message.reply_text(
            "üë• –£–∫–∞–∂–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:",
            parse_mode='HTML',
            reply_markup=cancel_keyboard
        )
        return ENTER_PASS_QNT
    
    except ValueError:
        cancel_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
            ])
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                                        reply_markup=cancel_keyboard)
        return ENTER_TIME

async def pass_qnt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await handle_cancel(update, context): return ConversationHandler.END
    pass_quantity = update.message.text
    try:
        # time = datetime.strptime(text, "%H:%M").time()
        context.user_data['request'].pass_qnt = pass_quantity
        
        await update.message.reply_text(
            "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b> –æ –ø–æ–µ–∑–¥–∫–µ, –µ–µ —É–≤–∏–¥—è—Ç –í–∞—à–∏"
            " –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ø—É—Ç—á–∏–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å <b>–±–∞–≥–∞–∂, —Å–∫–æ–ª—å–∫–æ –µ–≥–æ, —Ä–∞–∑–º–µ—Ä</b>.\n\n"
            "–ï—Å–ª–∏ —Ç–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –æ—Ç–≤–µ—Ç –ø—Ä–æ—á–µ—Ä–∫",
            parse_mode='HTML'
            # reply_markup=InlineKeyboardMarkup(POINTS_KEYBOARD_FROM)
        )
        return ENTER_COMMENT
    except ValueError:
        cancel_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
            ])
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                                        reply_markup=cancel_keyboard)
        return ENTER_TIME

async def user_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await handle_cancel(update, context): return ConversationHandler.END
    user_comment = update.message.text
    try:
        # time = datetime.strptime(text, "%H:%M").time()
        context.user_data['request'].user_comment = user_comment
        
        await update.message.reply_text(
            "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(POINTS_KEYBOARD_FROM)
        )
        return ENTER_DEPARTURE
    except ValueError:
        cancel_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
            ])
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                                        reply_markup=cancel_keyboard)
        return ENTER_TIME

async def enter_departure(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_point = query.data.replace("point_", "")
    context.user_data['request'].departure_point = selected_point
    await query.edit_message_text(
        f"üìç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {selected_point}\n‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(POINTS_KEYBOARD_TO)
    )
    return ENTER_DESTINATION

async def enter_destination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    selected_point = query.data.replace("point_", "")
    context.user_data['request'].destination_point = selected_point
    
    cancel_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(" ‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", callback_data="cancel_request")]
        ])
    
    await query.edit_message_text(
        "‚åõ <b>–ì–æ—Ç–æ–≤—ã –ø–æ–¥–æ–∂–∞—Ç—å –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤?</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>–º–∏–Ω—É—Ç</b>, —Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–æ–∂–¥–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30)\n\n",
        reply_markup=cancel_keyboard,
        parse_mode='HTML'
    )
    return ENTER_TIME_WINDOW

async def enter_time_window(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if await handle_cancel(update, context): return ConversationHandler.END
    try:
        time_window = int(update.message.text)
        if time_window <= 0: raise ValueError
        context.user_data['request'].time_window = time_window
        request = context.user_data['request']
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data='confirm')],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='cancel')]
        ]
        await update.message.reply_text(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n{request}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRM_REQUEST
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã):")
        return ENTER_TIME_WINDOW

async def confirm_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'confirm':
        request = context.user_data.get('request')
        try:
            request.save()
            response = (
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"{request}\n\n"
                f"üÜî ID –∑–∞—è–≤–∫–∏: <code>{request.request_id[-8:]}</code>\n\n"
                "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ù–∞—à–ª–∏ –ø–æ–ø—É—Ç—á–∏–∫–∞/–ø–æ–º–µ–Ω—è–ª–∏—Å—å –ø–ª–∞–Ω—ã? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ /delete_request\n\n"
                "–¢–∞–∫ –í—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –±–∞–∑—É –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –∏ –∏–∑–±–∞–≤–∏—Ç–µ –í–∞—à–∏—Ö –∫–æ–ª–ª–µ–≥ –æ—Ç –¥–æ–ª–≥–æ–≥–æ –ø–æ–∏—Å–∫–∞."
            )
            matches = find_matches(request)
            if matches:
                response += "\n\nüéâ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ø—É—Ç—á–∏–∫–∏:\n"
                for m in matches:
                    who = f"@{m.contact_id}" if m.contact_type == "username" else f"üìû {m.contact_id}"
                    response += f"{who}\n{m.date.strftime('%d.%m.%Y')} {m.time}\n"
                    response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –∑–∞—è–≤–∫–µ: {m.pass_qnt}\n"
                    response += f"–û—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {m.user_comment}\n\n"
                    
                    
                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–≤—à–∏—Ö –∑–∞—è–≤–∫–∏
                await notify_about_new_request(request, context.application.bot)
                
                response += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b> —Å–≤—è–∂–∏—Ç–µ—Å—Ç—å <b>—Å –ø–æ–ø—É—Ç—á–∏–∫–æ–º</b> –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                
            await query.edit_message_text(response, parse_mode='HTML')
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    else:
        await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É? –ñ–º–∏ ‚û°Ô∏è /new_request")
    
    for key in ['in_conversation', 'request', 'request_to_delete']:
        context.user_data.pop(key, None)
    # context.user_data.clear()
    return ConversationHandler.END

# === –ú–û–ò –ó–ê–Ø–í–ö–ò ===
async def my_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    
    user_id = update.effective_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ (–æ—à–∏–±–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –≥–ª.–º–µ–Ω—é)
        if not has_consented(user_id):
            await update.message.reply_text(
                "–í—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,"
                " —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–º,"
                " –∞ —Ç–∞–∫ –∂–µ –Ω–µ –¥–∞–ª–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ ‚û°Ô∏è /start")
            return ConversationHandler.END
            
        if get_black_list_check(user_id):
            await update.message.reply_text(
                "–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.\n\n"
                "–ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ –∞–¥—Ä–µ—Å—É taxicarpooling@mail.ru")
            return ConversationHandler.END   
             
        if context.user_data.get('in_conversation'):

            await restart_and_end(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ,–ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        else:

    
            user_id = update.effective_user.id
            requests = TravelRequest.get_active_requests(user_id)
            if not requests:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: /new_request", reply_markup=main_keyboard())
                # return START  #–¢–µ—Å—Ç–æ–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
                return ConversationHandler.END
            text = "üöñ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            for i, req in enumerate(requests, 1):
                who = f"@{req.contact_id}" if req.contact_type == "username" else f"üìû {req.contact_id}"
                text += (
                    f"{i}. {who}\n"
                    f"–ú–∞—Ä—à—Ä—É—Ç: {req.departure_point} ‚Üí {req.destination_point}\n"
                    f"–î–∞—Ç–∞: {req.date.strftime('%d.%m.%Y')}\n"
                    f"–í—Ä–µ–º—è: {req.time}\n"
                    f"–û–∫–Ω–æ: +{req.time_window} –º–∏–Ω\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –∑–∞—è–≤–∫–µ: {req.pass_qnt}\n"
                    f"ID: <code>{req.request_id[-8:]}</code>\n\n"
                )
            await update.message.reply_text(text, parse_mode='HTML', reply_markup=main_keyboard())
            # return START
            return ConversationHandler.END
        
    except:
        pass


# === –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ===
async def delete_request_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    
    user_id = update.effective_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥–µ (–æ—à–∏–±–æ—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –≥–ª.–º–µ–Ω—é)
        
        if context.user_data.get('in_conversation'):

            await restart_and_end(update, context)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ,–ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        else:
            
            if not has_consented(user_id):
                await update.message.reply_text(
                    "–í—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,"
                    " —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–º,"
                    " –∞ —Ç–∞–∫ –∂–µ –Ω–µ –¥–∞–ª–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                    "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ ‚û°Ô∏è /start")
                return ConversationHandler.END
                
            if get_black_list_check(user_id):
                await update.message.reply_text(
                    "–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—é —á–∞—Ç-–±–æ—Ç–∞.\n\n"
                    "–ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ –∞–¥—Ä–µ—Å—É taxicarpooling@mail.ru")
                return ConversationHandler.END
            # print('CATCH IN ELSE OF DELETE REQUEST START')
            
            user_id = update.effective_user.id
            requests = TravelRequest.get_active_requests(user_id)
            if not requests:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
                return ConversationHandler.END
            text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            for req in requests:
                text += (
                    f"ID: <code>{req.request_id[-8:]}</code>\n"
                    f"–ú–∞—Ä—à—Ä—É—Ç: {req.departure_point} ‚Üí {req.destination_point}\n"
                    f"–î–∞—Ç–∞: {req.date.strftime('%d.%m.%Y')} –í—Ä–µ–º—è: {req.time}\n\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –∑–∞—è–≤–∫–µ: {req.pass_qnt}\n"
                )
            await update.message.reply_text(
                text + "‚ùì –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É \n"
                "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–æ–º–µ—Ä, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä:",
                parse_mode='HTML',
                reply_markup=main_keyboard()
            )
            return DELETE_REQUEST
        
    except:
        update.message.reply_text('‚ö†Ô∏è delete_request_start –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –Ω–∞–∂–º–∏—Ç–µ ‚û°Ô∏è /start')

async def delete_request_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    short_id = update.message.text.strip()
    user_id = update.effective_user.id
    request = TravelRequest.get_by_short_id(short_id, user_id)
    if not request:
        await update.message.reply_text(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å —Ç–∞–∫–∏–º ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ—Ä–µ–∑ /my_requests.",
            reply_markup=main_keyboard()
        )
        return ConversationHandler.END
    context.user_data['request_to_delete'] = request
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–ø—É—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω", callback_data=f"delete_reason:found:{request.request_id}")],
        [InlineKeyboardButton("‚ùå –ü–æ–µ–∑–¥–∫–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞", callback_data=f"delete_reason:canceled:{request.request_id}")],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"delete_reason:abort:{request.request_id}")]
    ]
    await update.message.reply_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {request.departure_point} ‚Üí {request.destination_point}\n"
        f"–î–∞—Ç–∞: {request.date} –í—Ä–µ–º—è: {request.time}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –∑–∞—è–≤–∫–µ: {request.pass_qnt}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return DELETE_REASON

async def handle_delete_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    _, reason, request_id = query.data.split(":")
    if reason == "abort":
        await query.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        # –ß–∏—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ FSM-—Ñ–ª–∞–≥–∏, –∫–æ–Ω—Ç–∞–∫—Ç –æ—Å—Ç–∞–≤–ª—è–µ–º!
        for key in ['in_conversation', 'request', 'request_to_delete']:
            context.user_data.pop(key, None)
        return ConversationHandler.END
    request = TravelRequest.get_by_id(request_id)
    if not request:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        for key in ['in_conversation', 'request', 'request_to_delete']:
            context.user_data.pop(key, None)
        return ConversationHandler.END
    reason_text = {"found": "–ü–æ–ø—É—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω", "canceled": "–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"}.get(reason, "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    request.deactivate(reason_text)
    await query.edit_message_text(
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –±–∞–∑—É –∑–∞—è–≤–æ–∫.\n\n"
        f"‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n–ü—Ä–∏—á–∏–Ω–∞: {reason_text}\n\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {request.departure_point} ‚Üí {request.destination_point}\n"
        f"–î–∞—Ç–∞: {request.date}\n"
        f"–í—Ä–µ–º—è: {request.time}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –∑–∞—è–≤–∫–µ: {request.pass_qnt}\n"
        f"–û—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {request.user_comment}\n\n",
    )
    await query.message.reply_text(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=main_keyboard()
    )
    # –û–ß–ò–©–ê–ï–ú –¢–û–õ–¨–ö–û FSM!
    for key in ['in_conversation', 'request', 'request_to_delete']:
        context.user_data.pop(key, None)
    return ConversationHandler.END

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´ –ò –û–®–ò–ë–û–ö ===

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    context.user_data['in_conversation'] = False
    context.user_data.pop('request', None)
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ.\n–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –ñ–º–∏ ‚û°Ô∏è /new_request")
    else:
        await update.message.reply_text("")
            
    return ConversationHandler.END


async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if update.message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
        await cancel(update, context)
        return True
    return False


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    try:
        if update and hasattr(update, 'message') and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                                            "–í —Å–ª—É—á–∞–µ <b>–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b> –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ taxicarpooling@mail.ru",
                                            parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ error_handler: {e}")


async def notify_about_new_request(new_request: TravelRequest, bot):
    matches = find_matches(new_request)
    for match in matches:
        try:
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
            if match.user_id == new_request.user_id:
                continue
            who = f"@{new_request.contact_id}" if new_request.contact_type == "username" else f"üìû {new_request.contact_id}"
            await bot.send_message(
                chat_id=match.user_id,
                text=(
                    "üöñ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ø—É—Ç—á–∏–∫!\n\n"
                    f"–í–∞—à –º–∞—Ä—à—Ä—É—Ç: {match.departure_point} ‚Üí {match.destination_point}\n"
                    f"–ü–æ–ø—É—Ç—á–∏–∫: {who}\n"
                    f"–î–∞—Ç–∞: {new_request.date.strftime('%d.%m.%Y')}\n"
                    f"–í—Ä–µ–º—è: {new_request.time} (+ –≥–æ—Ç–æ–≤ –∂–¥–∞—Ç—å {new_request.time_window} –º–∏–Ω)\n\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤ –∑–∞—è–≤–∫–µ: {new_request.pass_qnt}\n"
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–∞—Å—Å–∞–∂–∏—Ä–∞: {new_request.user_comment}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b> —Å–≤—è–∂–∏—Ç–µ—Å—å <b>—Å –ø–æ–ø—É—Ç—á–∏–∫–æ–º</b> –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                ),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ø—É—Ç—á–∏–∫—É: {e}")

# ===== –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú  =====
async def announcement_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        gen_path = Path(__file__).parent
        # print('GEN PATH: ', gen_path)
        admin_list_path = gen_path / 'data'
        admin_list_path = admin_list_path / 'admin_list.txt'

        # print('BL PATH: ', black_list_path)
        with open(admin_list_path, 'r', encoding='utf-8') as file:
            data = file.read()
            ADMIN_IDS = ast.literal_eval(data)
    
        if update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return ConversationHandler.END
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:")
        return ANNOUNCEMENT_SEND
    
    except:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ, –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã.")
        return ConversationHandler.END
        

async def announcement_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    # –ü–æ–ª—É—á–∏ –≤—Å–µ user_id –∏–∑ —Ç–≤–æ–µ–π –ë–î. –ù–∞–ø—Ä–∏–º–µ—Ä:
    user_ids = get_all_user_ids()  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è!
    user_ids=list(set(user_ids))
    # –†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç flood_limit)
    delay = min(max(0.0015 * len(user_ids), 0.05), 0.25)
    
    count, fail = 0, 0
    fail_list = list()
    for uid in user_ids:
        try:
            print('TRY')
            
            await context.bot.send_message(uid, text)
            count += 1
            await asyncio.sleep(delay)  # —á—Ç–æ–± –Ω–µ —Å–ª–æ–≤–∏—Ç—å flood_limit!
        except Exception as e:
            # print('EXCEPTION', repr(e))
            fail += 1
            fail_list.append((uid, e))
    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {fail} –°–ø–∏—Å–æ–∫: {fail_list}")
    return ConversationHandler.END




def main() -> None:
    
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
 
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_db()
        try:
            check_db_structure()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        # check_db_structure()
        
        application = Application.builder().token(TG_TOKEN).build()
        
        application.add_handler(MessageHandler(filters.CONTACT, handle_phone))
        application.add_handler(CommandHandler('start', validation))
        application.add_handler(CallbackQueryHandler(agree_callback, pattern='^agree_personal_data$'))
        application.add_handler(CallbackQueryHandler(disagree_callback, pattern='^disagree_personal_data$'))
        
        application.add_handler(CommandHandler('my_requests', my_requests))
        application.add_handler(MessageHandler(filters.Regex("^üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏$"), my_requests))
        
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
        # application.add_handler(CommandHandler('–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫', restart))
        application.add_handler(MessageHandler(filters.Regex("^–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –ø—Ä–∞–≤–æ–≤–∞—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è$"), restart))
        # application.add_handler(MessageHandler(filters.Regex("^–ú–æ–∏ –∑–∞—è–≤–∫–∏$"), restart))
        # application.add_handler(MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É$"), restart))
        # application.add_handler(MessageHandler(filters.Regex("^–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞$"), restart))
        

                
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        request_conv_handler = ConversationHandler(
            entry_points=[CommandHandler('new_request', new_request),
                          MessageHandler(filters.Regex("^üöï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞$"), new_request)],
            states={
                ENTER_DATE: [MessageHandler(filters.Regex("^–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –ø—Ä–∞–≤–æ–≤–∞—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è$"), restart_and_end),
                              MessageHandler(filters.Regex("^–ú–æ–∏ –∑–∞—è–≤–∫–∏$"), restart_and_end),
                              MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É$"), restart_and_end),
                              CallbackQueryHandler(restart_and_end, pattern='^–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É$'),
                              MessageHandler(filters.Regex("^–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞$"), restart_and_end),
                            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_date)],
                ENTER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_time)],
                ENTER_PASS_QNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pass_qnt)],
                ENTER_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, user_comment)],
                
                ENTER_DEPARTURE: [CallbackQueryHandler(enter_departure, pattern='^point_')],
                ENTER_DESTINATION: [CallbackQueryHandler(enter_destination, pattern='^point_')],    
                ENTER_TIME_WINDOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_time_window)],
                CONFIRM_REQUEST: [CallbackQueryHandler(confirm_request)],
                },
            fallbacks=[CommandHandler('cancel', cancel), 
                       CallbackQueryHandler(cancel, pattern='^cancel_request$'),
                       ],
            )
        
        application.add_handler(request_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        delete_conv_handler = ConversationHandler(
            entry_points=[CommandHandler('delete_request', delete_request_start),
                          MessageHandler(filters.Regex("^‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É$"), delete_request_start)],
            states={
                DELETE_REQUEST: [#MessageHandler(filters.Regex("^–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é, –ø—Ä–∞–≤–æ–≤–∞—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è$"), cancel),
                                 MessageHandler(filters.TEXT & ~filters.COMMAND, delete_request_confirm)],
                DELETE_REASON: [CallbackQueryHandler(handle_delete_reason, pattern='^delete_reason:')],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )
        application.add_handler(delete_conv_handler)
        
        tell_to_all_cond_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex(r"(?i)^—Å–¥–µ–ª–∞—Ç—å\s+–æ–±—ä—è–≤–ª–µ–Ω–∏–µ$"), announcement_start),
                          CommandHandler('tell_to_all', announcement_start)],
            
            states={
                # ANNOUNCEMENT_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, announcement_start)],
                ANNOUNCEMENT_SEND: [MessageHandler(filters.TEXT & ~filters.COMMAND, announcement_send)]
                },
            fallbacks=[CommandHandler('cancel', cancel), 
                CallbackQueryHandler(cancel, pattern='^cancel_request$'),
                ]
            )
        
        application.add_handler(tell_to_all_cond_handler)
        
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
      

if __name__ == '__main__':
    
    init_db()
    init_consents_db()
    
    if check_db_structure():
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î —É—Å–ø–µ—à–Ω–∞")
    else:
        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ë–î, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    # print('hello')
    
    main()
